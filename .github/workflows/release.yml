name: Create Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [amd64, armhf, arm64]

    steps:
      - uses: actions/checkout@v2
      - name: setup environment
        run: |
          sudo apt-get update
          sudo apt-get install autoconf automake libtool help2man make dh-make
          gcc --version
      - name: install cross compiler
        if: ${{ matrix.arch  }} != 'amd64'
        run: |
          sudo apt-get install crossbuild-essential-${{ matrix.arch }}
      - name: automake
        run: ./scripts/bootstrap.sh
      - name: package
        run: dpkg-buildpackage -b -us -uc -d -rfakeroot --host-arch ${{ matrix.arch }}
      - name: upload artifact
        run: |
          mkdir -p outputs
          mv ../debugfatfs_*.deb outputs
      - if: always()
        uses: actions/upload-artifact@v2
        with:
          name: outputs
          path: outputs/debugfatfs_*.deb
          retention-days: 1

  after-build:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
        with:
          name: outputs
      - name: obtain contents
        run: |
          ./scripts/get_changelog.sh ${{ github.ref }} > contents.md
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: "contents.md"
          draft: false
          prerelease: false
      - name: test
        run: |
          mkdir -p ../output
          ls -l ../
          mv debugfatfs_*.deb ../output
      - name: Create Release
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log('environment', process.versions);
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });
            const release = await github.repos.createRelease({
              owner, repo,
              tag_name: process.env.GITHUB_REF,
              draft: true,
              target_commitish: sha
              body: await fs.readFile(`contents.md`)
            });
            console.log('created release', { release });
            for (let file of await fs.readdir('../output/')) {
              // do whatever filtering you want here, I'm just uploading all the files
              console.log('uploading', file);
              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`../output/${file}`)
              });
            }
